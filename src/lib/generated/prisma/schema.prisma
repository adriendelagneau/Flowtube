generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  channel         Channel[]
  likes           Like[]
  dislikes        Dislike[]
  watchHistory    WatchHistory[]
  commentLikes    CommentLike[]
  commentDislikes CommentDislike[]
  Comment         Comment[]
  Notifications   Notification[]
  subscriptions   Subscription[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Channel {
  id              String  @id @default(uuid())
  name            String  @unique
  description     String?
  image           String?
  backgroundImage String  @default("/background.png")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  videos        Video[]
  subscriptions Subscription[]

  @@map("channel")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  videos Video[]

  @@map("category")
}

enum VideoVisibility {
  private
  public
}

model Video {
  id             String          @id @default(uuid())
  title          String
  description    String?
  muxStatus      String?
  muxAssetId     String?         @unique
  muxUploadId    String?         @unique
  muxPlaybackId  String?         @unique
  muxTrackId     String?         @unique
  muxTrackStatus String?
  thumbnailUrl   String?
  thumbnailKey   String?
  previewUrl     String?
  previewKey     String?
  duration       Int             @default(0)
  visibility     VideoVisibility @default(private)
  userId         String
  channelId      String // âœ… Added field
  categoryId     String?

  videoViews Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  channel      Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  category     Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  likes        Like[]
  dislikes     Dislike[]
  Comment      Comment[]
  WatchHistory WatchHistory[]

  @@map("video")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("like")
}

model Dislike {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("dislike")
}

model WatchHistory {
  id                 String   @id @default(uuid())
  userId             String
  videoId            String
  watchedAt          DateTime @default(now())
  watchedDuration    Int      @default(0) // Duration watched so far
  progressPercentage Float    @default(0) // Progress of video
  completed          Boolean  @default(false)
  lastWatchedAt      DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId]) // This ensures that each user-video pair is unique
}

model Comment {
  id        String   @id @default(uuid())
  parentId  String? // Make it optional to allow top-level comments
  userId    String
  videoId   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  commentLikes    CommentLike[]
  commentDislikes CommentDislike[]

  parent  Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentToReplies")

  @@map("comment")
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_like")
}

model CommentDislike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_dislike")
}

enum NotificationType {
  NEW_VIDEO
  LIVE_START
  COMMENT
  REPLY
  SUBSCRIBER
  MENTION
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  videoId   String?
  channelId String?

  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, read, createdAt])
}

enum NotifyLevel {
  ALL
  PERSONALIZED
  NONE
}

model Subscription {
  id          String      @id @default(cuid())
  userId      String
  channelId   String
  notify      Boolean     @default(true)
  notifyLevel NotifyLevel @default(ALL)
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id])
  channel     Channel     @relation(fields: [channelId], references: [id])

  @@unique([userId, channelId]) // ðŸ‘ˆ This is what enables userId_channelId
}
